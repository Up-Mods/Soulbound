plugins {
    id "maven-publish"
    alias libs.plugins.quilt.loom
}

// messy workaround for bug in quilt loom 1.3.3+
project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
def javaVersion = 17

group = project.maven_group_id

def ENV = System.getenv()
def NOW = new Date();
def buildTime = ENV.BUILD_TIME ?: NOW.format('yyyyMMddHHmmss')

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}") : ""
version = (ENV.TAG ?: "${libs.versions.minecraft.get()}-development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

println("Building ${project.name} ${version}")

base {
	archivesName = "${rootProject.name}-Quilt"
}

repositories {
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org"
    }
	maven {
		name = "Up-Mods"
		url = "https://maven.uuid.gg/releases"
	}
	maven {
		name = "Ladysnake"
		url = "https://maven.ladysnake.org/releases"
	}
	maven {
		// needed for polymer
		name = "NucleoidMC"
		url = "https://maven.nucleoid.xyz"
	}
	maven {
		name = "TeamResourceful"
		url = "https://maven.teamresourceful.com/repository/maven-releases"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
	}
	maven {
		// needed for fabric permissions api
		name = "Sonatype Snapshots"
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
    minecraft libs.minecraft
	mappings(loom.layered {
		it.parchment("${libs.parchment.mappings.get()}@zip")
		it.officialMojangMappings()
	})
    modImplementation libs.quilt.loader

    // QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
    // Quilted Fabric API will automatically pull in the correct QSL version.
    modImplementation libs.quilted.fabric.api
    modLocalRuntime (libs.quilted.fabric.api.deprecated) {
		transitive = false
	}

	modImplementation libs.sparkweave

    modImplementation libs.resourcefulconfig.fabric

    modCompileOnly libs.emi
	modLocalRuntime libs.emi

    modLocalRuntime libs.modmenu

	modCompileOnly libs.universalgraves
	modLocalRuntime libs.bundles.universalgraves.runtime

	modCompileOnly libs.trinkets
	modLocalRuntime libs.trinkets

    modLocalRuntime libs.lazydfu
}

loom {
	mods {
		"${project.mod_id}" {
			sourceSet("main")
		}
	}
	mixin {
		defaultRefmapName.set("${project.mod_id}.refmap.json")
	}
}

processResources {
	filteringCharset = "UTF-8"

	def expandProps = [
		"version"             : version,
		"maven_group_id"      : maven_group_id,
		"mod_id"              : mod_id,
		"minecraft_version"   : libs.versions.minecraft.get(),

		"quilt_loader_version": libs.versions.quilt.loader.get(),
	]

	filesMatching(['*.mod.json', '*.mixins.json']) {
		expand expandProps
	}
	inputs.properties(expandProps)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
        vendor = JvmVendorSpec.MICROSOFT
    }
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE.md') {
		rename { "LICENSE_${base.archivesName.get()}.md" }
	}

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group.toLowerCase(Locale.ROOT)}:${project.archivesBaseName.toLowerCase(Locale.ROOT)}:${project.version}",
            "Built-On-Minecraft": libs.versions.minecraft.get(),
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

sourcesJar {
	from('LICENSE.md') {
		rename { "LICENSE_${base.archivesName.get()}.md" }
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release.set(javaVersion)
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
//			artifactId "${rootProject.name}-Quilt"
            from components.java
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USERNAME
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}
